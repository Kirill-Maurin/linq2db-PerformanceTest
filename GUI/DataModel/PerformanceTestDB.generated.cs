//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/linq2db).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;

using LinqToDB;
using LinqToDB.DataProvider.SqlServer;
using LinqToDB.Extensions;
using LinqToDB.Mapping;

namespace PerformanceTest.DataModel
{
	/// <summary>
	/// Database       : PerformanceTest
	/// Data Source    : .
	/// Server Version : 13.00.4001
	/// </summary>
	public partial class PerformanceTestDB : LinqToDB.Data.DataConnection
	{
		public ITable<Narrow>        Narrows         { get { return this.GetTable<Narrow>(); } }
		public ITable<NarrowLong>    NarrowLongs     { get { return this.GetTable<NarrowLong>(); } }
		public ITable<Setting>       Settings        { get { return this.GetTable<Setting>(); } }
		public ITable<TestMethod>    TestMethods     { get { return this.GetTable<TestMethod>(); } }
		public ITable<TestResult>    TestResults     { get { return this.GetTable<TestResult>(); } }
		public ITable<TestRun>       TestRuns        { get { return this.GetTable<TestRun>(); } }
		public ITable<TestStopwatch> TestStopwatches { get { return this.GetTable<TestStopwatch>(); } }
		public ITable<WideLong>      WideLongs       { get { return this.GetTable<WideLong>(); } }

		public PerformanceTestDB()
		{
			InitDataContext();
		}

		public PerformanceTestDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		#region FreeTextTable

		public class FreeTextKey<T>
		{
			public T   Key;
			public int Rank;
		}

		private static MethodInfo _freeTextTableMethod1 = typeof(PerformanceTestDB).GetMethod("FreeTextTable", new Type[] { typeof(string), typeof(string) });

		[FreeTextTableExpression]
		public ITable<FreeTextKey<TKey>> FreeTextTable<TTable,TKey>(string field, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				_freeTextTableMethod1,
				field,
				text);
		}

		private static MethodInfo _freeTextTableMethod2 = 
			typeof(PerformanceTestDB).GetMethods()
				.Where(m => m.Name == "FreeTextTable" &&  m.IsGenericMethod && m.GetParameters().Length == 2)
				.Where(m => m.GetParameters()[0].ParameterType.IsGenericTypeEx() && m.GetParameters()[0].ParameterType.GetGenericTypeDefinition() == typeof(Expression<>))
				.Where(m => m.GetParameters()[1].ParameterType == typeof(string))
				.Single();

		[FreeTextTableExpression]
		public ITable<FreeTextKey<TKey>> FreeTextTable<TTable,TKey>(Expression<Func<TTable,string>> fieldSelector, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				_freeTextTableMethod2,
				fieldSelector,
				text);
		}

		#endregion
	}

	[Table(Schema="dbo", Name="Narrow")]
	public partial class Narrow
	{
		[PrimaryKey, NotNull] public int ID     { get; set; } // int
		[Column,     NotNull] public int Field1 { get; set; } // int
	}

	[Table(Schema="dbo", Name="NarrowLong")]
	public partial class NarrowLong
	{
		[PrimaryKey, NotNull] public int ID     { get; set; } // int
		[Column,     NotNull] public int Field1 { get; set; } // int
	}

	[Table(Schema="dbo", Name="Setting")]
	public partial class Setting
	{
		[PrimaryKey, NotNull    ] public string Name  { get; set; } // nvarchar(20)
		[Column,        Nullable] public string Value { get; set; } // nvarchar(10)
	}

	[Table(Schema="dbo", Name="TestMethod")]
	public partial class TestMethod
	{
		[PrimaryKey, Identity   ] public int    ID        { get; set; } // int
		[Column,     NotNull    ] public int    TestRunID { get; set; } // int
		[Column,        Nullable] public string Name      { get; set; } // nvarchar(50)
		[Column,     NotNull    ] public int    Repeat    { get; set; } // int
		[Column,        Nullable] public int?   Take      { get; set; } // int
	}

	[Table(Schema="dbo", Name="TestResult")]
	public partial class TestResult
	{
		[PrimaryKey, Identity   ] public int      ID              { get; set; } // int
		[Column,        Nullable] public string   Platform        { get; set; } // nvarchar(50)
		[Column,        Nullable] public string   GroupName       { get; set; } // nvarchar(50)
		[Column,        Nullable] public string   TestName        { get; set; } // nvarchar(50)
		[Column,     NotNull    ] public int      Repeat          { get; set; } // int
		[Column,        Nullable] public int?     Take            { get; set; } // int
		[Column,        Nullable] public string   TestDescription { get; set; } // nvarchar(50)
		[Column,        Nullable] public string   Provider        { get; set; } // nvarchar(50)
		[Column,     NotNull    ] public long     Ticks           { get; set; } // bigint
		[Column,     NotNull    ] public TimeSpan Time            { get; set; } // time(7)
	}

	[Table(Schema="dbo", Name="TestRun")]
	public partial class TestRun
	{
		[PrimaryKey, Identity   ] public int      ID        { get; set; } // int
		[Column,        Nullable] public string   Platform  { get; set; } // nvarchar(50)
		[Column,        Nullable] public string   Name      { get; set; } // nvarchar(50)
		[Column,     NotNull    ] public DateTime CreatedOn { get; set; } // datetime2(7)
	}

	[Table(Schema="dbo", Name="TestStopwatch")]
	public partial class TestStopwatch
	{
		[PrimaryKey, Identity   ] public int      ID           { get; set; } // int
		[Column,     NotNull    ] public int      TestMethodID { get; set; } // int
		[Column,     NotNull    ] public TimeSpan Time         { get; set; } // time(7)
		[Column,     NotNull    ] public long     Ticks        { get; set; } // bigint
		[Column,        Nullable] public string   Provider     { get; set; } // nvarchar(50)
	}

	[Table(Schema="dbo", Name="WideLong")]
	public partial class WideLong
	{
		[PrimaryKey, NotNull    ] public int       ID            { get; set; } // int
		[Column,     NotNull    ] public int       Field1        { get; set; } // int
		[Column,        Nullable] public byte?     ByteValue     { get; set; } // tinyint
		[Column,        Nullable] public short?    ShortValue    { get; set; } // smallint
		[Column,        Nullable] public int?      IntValue      { get; set; } // int
		[Column,        Nullable] public long?     LongValue     { get; set; } // bigint
		[Column,        Nullable] public string    StringValue   { get; set; } // nvarchar(100)
		[Column,        Nullable] public DateTime? DateTimeValue { get; set; } // datetime2(7)
		[Column,        Nullable] public TimeSpan? TimeValue     { get; set; } // time(7)
		[Column,        Nullable] public decimal?  DecimalValue  { get; set; } // decimal(18, 0)
		[Column,        Nullable] public double?   DoubleValue   { get; set; } // float
		[Column,        Nullable] public float?    FloatValue    { get; set; } // real
	}

	public static partial class TableExtensions
	{
		public static Narrow Find(this ITable<Narrow> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static NarrowLong Find(this ITable<NarrowLong> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static Setting Find(this ITable<Setting> table, string Name)
		{
			return table.FirstOrDefault(t =>
				t.Name == Name);
		}

		public static TestMethod Find(this ITable<TestMethod> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static TestResult Find(this ITable<TestResult> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static TestRun Find(this ITable<TestRun> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static TestStopwatch Find(this ITable<TestStopwatch> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static WideLong Find(this ITable<WideLong> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}
	}
}

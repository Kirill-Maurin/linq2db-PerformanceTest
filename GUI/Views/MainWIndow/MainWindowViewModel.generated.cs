//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/linq2db).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Windows;

using PerformanceTest.Views.TestControl;

namespace PerformanceTest.Views.MainWindow
{
	public partial class MainWindowViewModel : INotifyPropertyChanged
	{
		#region WindowState : WindowState

		private WindowState _windowState;
		public  WindowState  WindowState
		{
			get { return _windowState; }
			set
			{
				if (_windowState != value)
				{
					BeforeWindowStateChanged(value);
					_windowState = value;
					AfterWindowStateChanged();

					OnWindowStateChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeWindowStateChanged(WindowState newValue);
		partial void AfterWindowStateChanged ();

		public const string NameOfWindowState = "WindowState";

		private static readonly PropertyChangedEventArgs _windowStateChangedEventArgs = new PropertyChangedEventArgs(NameOfWindowState);

		private void OnWindowStateChanged()
		{
			OnPropertyChanged(_windowStateChangedEventArgs);
		}

		#endregion

		#endregion

		#region Status : string

		private string _status;
		public  string  Status
		{
			get { return _status; }
			set
			{
				if (_status != value)
				{
					BeforeStatusChanged(value);
					_status = value;
					AfterStatusChanged();

					OnStatusChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeStatusChanged(string newValue);
		partial void AfterStatusChanged ();

		public const string NameOfStatus = "Status";

		private static readonly PropertyChangedEventArgs _statusChangedEventArgs = new PropertyChangedEventArgs(NameOfStatus);

		private void OnStatusChanged()
		{
			OnPropertyChanged(_statusChangedEventArgs);
		}

		#endregion

		#endregion

		#region Tests : ObservableCollection<TestViewModel>

		private ObservableCollection<TestViewModel> _tests;
		public  ObservableCollection<TestViewModel>  Tests
		{
			get { return _tests; }
			set
			{
				if (_tests != value)
				{
					BeforeTestsChanged(value);
					_tests = value;
					AfterTestsChanged();

					OnTestsChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeTestsChanged(ObservableCollection<TestViewModel> newValue);
		partial void AfterTestsChanged ();

		public const string NameOfTests = "Tests";

		private static readonly PropertyChangedEventArgs _testsChangedEventArgs = new PropertyChangedEventArgs(NameOfTests);

		private void OnTestsChanged()
		{
			OnPropertyChanged(_testsChangedEventArgs);
		}

		#endregion

		#endregion

		#region INotifyPropertyChanged support

#if !SILVERLIGHT
		[field : NonSerialized]
#endif
		public virtual event PropertyChangedEventHandler PropertyChanged;

		protected void OnPropertyChanged(string propertyName)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
#if SILVERLIGHT
				if (System.Windows.Deployment.Current.Dispatcher.CheckAccess())
					propertyChanged(this, new PropertyChangedEventArgs(propertyName));
				else
					System.Windows.Deployment.Current.Dispatcher.BeginInvoke(
						() =>
						{
							var pc = PropertyChanged;
							if (pc != null)
								pc(this, new PropertyChangedEventArgs(propertyName));
						});
#else
				propertyChanged(this, new PropertyChangedEventArgs(propertyName));
#endif
			}
		}

		protected void OnPropertyChanged(PropertyChangedEventArgs arg)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
#if SILVERLIGHT
				if (System.Windows.Deployment.Current.Dispatcher.CheckAccess())
					propertyChanged(this, arg);
				else
					System.Windows.Deployment.Current.Dispatcher.BeginInvoke(
						() =>
						{
							var pc = PropertyChanged;
							if (pc != null)
								pc(this, arg);
						});
#else
				propertyChanged(this, arg);
#endif
			}
		}

		#endregion
	}
}
